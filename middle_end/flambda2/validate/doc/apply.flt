let $camlApply__first_const34 = Block 0 () in
let code rec size(8)
      g_1 (x) my_closure my_region my_depth -> k * k1 : imm tagged =
  let next_depth = rec_info (succ my_depth) in
  let h = %project_function_slot (g -> h) my_closure in
  apply direct(h_2) (h : _ -> imm tagged) (x) -> k2 * k1
    where k2 (apply_result) =
      let Paddint = apply_result + 42 in
      cont k (Paddint)
and code rec inline(never) size(5)
      h_2 (x) my_closure my_region my_depth -> k * k1 : imm tagged =
  let next_depth = rec_info (succ my_depth) in
  let g = %project_function_slot (h -> g) my_closure in
  apply direct(g_1) (g : _ -> imm tagged) (x) -> k * k1
in
let code inline(never) size(3)
      f_0 (x : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let Paddint = x + 42 in
  cont k (Paddint)
in
(let f = closure f_0 @f in
 let g = closure g_1 @g and h = closure h_2 @h in
 apply direct(g_1) (g : _ -> imm tagged) (10) -> k1 * error
   where k1 (i : imm tagged) =
     let Pmakeblock = %Block 0 (42, f, g, h, i) in
     cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(5) (module_block, 0) in
    let field_1 = %block_load tag(0) size(5) (module_block, 1) in
    let field_2 = %block_load tag(0) size(5) (module_block, 2) in
    let field_3 = %block_load tag(0) size(5) (module_block, 3) in
    let field_4 = %block_load tag(0) size(5) (module_block, 4) in
    let $camlApply = Block 0 (field_0, field_1, field_2, field_3, field_4) in
    cont done ($camlApply)
===>
let code h_2 deleted and code g_1 deleted in
let code f_0 deleted in
let code inline(never) size(3) newer_version_of(f_0)
      f_0_1 (x : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let Paddint = x + 42 in
  cont k (Paddint)
in
let $camlApply__f_3 = closure f_0_1 @f in
let code rec inline(never) size(4) newer_version_of(h_2)
      h_2_1 (x) my_closure my_region my_depth -> k * k1 : imm tagged =
  apply direct(g_1_1) ($camlApply__g_4 : _ -> imm tagged) (x) -> k * k1
and code rec size(7) newer_version_of(g_1)
      g_1_1 (x) my_closure my_region my_depth -> k * k1 : imm tagged =
  apply direct(h_2_1) ($camlApply__h_5 : _ -> imm tagged) (x) -> k2 * k1
    where k2 (apply_result) =
      let Paddint = apply_result + 42 in
      cont k (Paddint)
and $camlApply__g_4 =
  closure g_1_1 @g
and $camlApply__h_5 =
  closure h_2_1 @h
in
apply direct(g_1_1) ($camlApply__g_4 : _ -> imm tagged) (10) -> k * error
  where k (i : imm tagged) =
    let $camlApply =
      Block 0 (42, $camlApply__f_3, $camlApply__g_4, $camlApply__h_5, i)
    in
    cont done ($camlApply)
