let $camlLocalrec__first_const23 = Block 0 () in
let code rec size(5) foo_0 (param) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let bar = %project_function_slot (foo -> bar) my_closure in
  apply direct(bar_1) bar (0) &my_region -> k * k1
and code rec size(5) bar_1 (param) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let foo = %project_function_slot (bar -> foo) my_closure in
  apply direct(foo_0) foo (0) &my_region -> k * k1
in
(let `region` = %begin_region in
 (let foo = closure foo_0 @foo and bar = closure bar_1 @bar in
  apply direct(bar_1) bar (0) &`region` -> k2 * error)
   where k2 (region_return) =
     let `unit` = %end_region `region` in
     cont k1 (region_return))
  where k1 (g) =
    let Pmakeblock = %Block 0 (g) in
    cont k (Pmakeblock)
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(1) (module_block, 0) in
    let $camlLocalrec = Block 0 (field_0) in
    cont done ($camlLocalrec)
===>
let code bar_1 deleted and code foo_0 deleted in
let `region` = %begin_region in
(let code rec size(4) newer_version_of(bar_1)
       bar_1_1 (param) my_closure my_region my_depth -> k1 * k2 =
   apply direct(foo_0_1) $camlLocalrec__foo_2 (0) &my_region -> k1 * k2
 and $camlLocalrec__foo_2 =
   closure foo_0_1 @foo
 and $camlLocalrec__bar_3 =
   closure bar_1_1 @bar
 and code rec size(4) newer_version_of(foo_0)
       foo_0_1 (param) my_closure my_region my_depth -> k1 * k2 =
   apply direct(bar_1_1) $camlLocalrec__bar_3 (0) &my_region -> k1 * k2
 in
 apply direct(bar_1_1) $camlLocalrec__bar_3 (0) &`region` -> k * error)
  where k (region_return) =
    let `unit` = %end_region `region` in
    let $camlLocalrec = Block 0 (region_return) in
    cont done ($camlLocalrec)
