let $camlS__const_block27 = Block 1 (2) in
let $camlS__const_block29 = Block 0 (3) in
let code inline(always) size(32)
      g_0 (t : variant) my_closure my_region my_depth -> k * k1 : imm tagged =
  (let prim = %get_tag t in
   let scrutinee_tag = %Tag_imm prim in
   let untagged = %untag_imm scrutinee_tag in
   switch untagged
     | 0 -> k2
     | 1 -> k3
     | 2 -> k4)
    where k4 =
      let Pfield = %block_load (t, 0) in
      let Paddint = Pfield + 3 in
      cont k (Paddint)
    where k3 =
      let Pfield = %block_load (t, 0) in
      let Paddint = Pfield + 2 in
      cont k (Paddint)
    where k2 =
      let Pfield = %block_load (t, 0) in
      let Paddint = Pfield + 1 in
      cont k (Paddint)
in
let code size(16)
      f_1 (x : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let g = %project_value_slot f.g my_closure in
  (let untagged = %untag_imm x in
   switch untagged
     | 0 -> k2 ($camlS__const_block27)
     | 1 -> k2 ($camlS__const_block29))
    where k2 (y : variant) =
      apply direct(g_0) (g : _ -> imm tagged) (y) -> k * k1
in
(let g = closure g_0 @g in
 let f = closure f_1 @f with { g = g } in
 let Pmakeblock = %Block 0 (g, f) in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(2) (module_block, 0) in
    let field_1 = %block_load tag(0) size(2) (module_block, 1) in
    let $camlS = Block 0 (field_0, field_1) in
    cont done ($camlS)
===>
let code g_0 deleted in
let code f_1 deleted in
let code inline(always) size(29) newer_version_of(g_0)
      g_0_1 (t : variant)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  (let prim = %get_tag t in
   switch prim
     | 0 -> k2
     | 1 -> k3
     | 2 -> k4)
    where k4 =
      let Pfield = %block_load (t, 0) in
      let Paddint = Pfield + 3 in
      cont k (Paddint)
    where k3 =
      let Pfield = %block_load (t, 0) in
      let Paddint = Pfield + 2 in
      cont k (Paddint)
    where k2 =
      let Pfield = %block_load (t, 0) in
      let Paddint = Pfield + 1 in
      cont k (Paddint)
in
let $camlS__g_2 = closure g_0_1 @g in
let code size(0) newer_version_of(f_1)
      f_1_1 (x : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  cont k (4)
in
let $camlS__f_3 = closure f_1_1 @f in
let $camlS = Block 0 ($camlS__g_2, $camlS__f_3) in
cont done ($camlS)
