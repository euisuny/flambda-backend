let $camlRec__first_const20 = Block 0 () in
let code rec size(5) f_0 (x) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let g = %project_function_slot (f -> g) my_closure in
  apply direct(g_1) g (x) -> k * k1
and code rec size(5) g_1 (x) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let f = %project_function_slot (g -> f) my_closure in
  apply direct(f_0) f (x) -> k * k1
in
(let f = closure f_0 @f and g = closure g_1 @g in
 let Pmakeblock = %Block 0 (f, g) in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(2) (module_block, 0) in
    let field_1 = %block_load tag(0) size(2) (module_block, 1) in
    let $camlRec = Block 0 (field_0, field_1) in
    cont done ($camlRec)
===>
let code g_1 deleted and code f_0 deleted in
let code rec size(4) newer_version_of(f_0)
      f_0_1 (x) my_closure my_region my_depth -> k * k1 =
  apply direct(g_1_1) $camlRec__g_3 (x) -> k * k1
and code rec size(4) newer_version_of(g_1)
      g_1_1 (x) my_closure my_region my_depth -> k * k1 =
  apply direct(f_0_1) $camlRec__f_2 (x) -> k * k1
and $camlRec__f_2 =
  closure f_0_1 @f
and $camlRec__g_3 =
  closure g_1_1 @g
in
let $camlRec = Block 0 ($camlRec__f_2, $camlRec__g_3) in
cont done ($camlRec)
