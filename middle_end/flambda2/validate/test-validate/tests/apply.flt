let $camlApply__first_const20 = Block 0 () in
let code size(1) f_0 (x) my_closure my_region my_depth -> k * k1 =
  let Popaque = %Opaque x in
  cont k (Popaque)
in
let code size(5) g_1 (x) my_closure my_region my_depth -> k * k1 =
  let f = %project_value_slot g.f my_closure in
  apply direct(f_0) f (x) -> k * k1
in
(let f = closure f_0 @f in
 let g = closure g_1 @g with { f = f } in
 let Pmakeblock = %Block 0 (f, g) in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(2) (module_block, 0) in
    let field_1 = %block_load tag(0) size(2) (module_block, 1) in
    let $camlApply = Block 0 (field_0, field_1) in
    cont done ($camlApply)
===>
let code f_0 deleted in
let code g_1 deleted in
let code size(1) newer_version_of(f_0)
      f_0_1 (x) my_closure my_region my_depth -> k * k1 =
  let Popaque = %Opaque x in
  cont k (Popaque)
in
let $camlApply__f_2 = closure f_0_1 @f in
let code size(1) newer_version_of(g_1)
      g_1_1 (x) my_closure my_region my_depth -> k * k1 =
  let Popaque = %Opaque x in
  cont k (Popaque)
in
let $camlApply__g_3 = closure g_1_1 @g in
let $camlApply = Block 0 ($camlApply__f_2, $camlApply__g_3) in
cont done ($camlApply)
