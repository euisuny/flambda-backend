let $camlArith__first_const16 = Block 0 () in
let code size(21) f_0 (x) my_closure my_region my_depth -> k * k1 =
  let Paddint = 2 + 3 in
  let Pmulint = Paddint * 1 in
  let prim = %phys_eq (Pmulint, 2) in
  let Pintcomp = %Tag_imm prim in
  let untagged = %untag_imm Pintcomp in
  switch untagged
    | 0 -> k (1)
    | 1 -> k (0)
in
(let f = closure f_0 @f in
 let Pmakeblock = %Block 0 (f) in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(1) (module_block, 0) in
    let $camlArith = Block 0 (field_0) in
    cont done ($camlArith)
===>
let code f_0 deleted in
let code size(0) newer_version_of(f_0)
      f_0_1 (x) my_closure my_region my_depth -> k * k1 =
  cont k (1)
in
let $camlArith__f_1 = closure f_0_1 @f in
let $camlArith = Block 0 ($camlArith__f_1) in
cont done ($camlArith)
