let $camlTests11_simple__first_const20 = Block 0 () in
let code size(6)
      bar_0 (map_foo, param : imm tagged)
        my_closure my_region my_depth
        -> k * k1 =
  apply inlined(never) map_foo (0) -> k * k1
in
let code rec size(5)
      map_foo_1 (param : imm tagged) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let bar = %project_value_slot map_foo.bar my_closure in
  apply direct(bar_0)
    bar (my_closure ~ depth my_depth -> next_depth, 0) -> k * k1
in
(let bar = closure bar_0 @bar in
 let map_foo = closure map_foo_1 @map_foo with { bar = bar } in
 let Pmakeblock = %Block 0 (bar, map_foo) in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(2) (module_block, 0) in
    let field_1 = %block_load tag(0) size(2) (module_block, 1) in
    let $camlTests11_simple = Block 0 (field_0, field_1) in
    cont done ($camlTests11_simple)
===>
let code bar_0 deleted in
let code map_foo_1 deleted in
let code size(6) newer_version_of(bar_0)
      bar_0_1 (map_foo, param : imm tagged)
        my_closure my_region my_depth
        -> k * k1 =
  apply inlined(never) map_foo (0) -> k * k1
in
let $camlTests11_simple__bar_2 = closure bar_0_1 @bar in
let code rec size(4) newer_version_of(map_foo_1)
      map_foo_1_1 (param : imm tagged)
        my_closure my_region my_depth
        -> k * k1 =
  apply direct(map_foo_1_1) inlined(never) inlining_state(depth(10))
    $camlTests11_simple__map_foo_3 (0) -> k * k1
and $camlTests11_simple__map_foo_3 =
  closure map_foo_1_1 @map_foo
in
let $camlTests11_simple =
  Block 0 ($camlTests11_simple__bar_2, $camlTests11_simple__map_foo_3)
in
cont done ($camlTests11_simple)
