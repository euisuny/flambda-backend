let $camlFoo__first_const28 = Block 0 () in
let code rec loopify(never) size(26)
      unsafe_really_input__0 (ic, s, ofs, len)
        my_closure my_region my_depth
        -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  (let untagged = %untag_imm len in
   switch untagged
     | 0 -> k2
     | 1 -> k (0))
    where k2 =
      ((let untagged = %untag_imm len in
        switch untagged
          | 0 -> k2
          | 1 -> k (0))
         where k2 =
           apply direct(unsafe_really_input__0)
             my_closure (ic, s, ofs, len) &my_region -> k * k1)
in
let code size(16)
      really_input__1 (ic, s, ofs, len)
        my_closure my_region my_depth
        -> k * k1 =
  let unsafe_really_input_ =
    %project_value_slot really_input_.unsafe_really_input_ my_closure
  in
  (let untagged = %untag_imm ofs in
   switch untagged
     | 0 -> k2
     | 1 -> k (0))
    where k2 =
      apply direct(unsafe_really_input__0)
        unsafe_really_input_ (ic, s, ofs, len) &my_region -> k * k1
in
(let unsafe_really_input_ =
   closure unsafe_really_input__0 @unsafe_really_input_
 in
 let really_input_ = closure really_input__1 @really_input_
 with { unsafe_really_input_ = unsafe_really_input_ }
 in
 let Pmakeblock = %Block 0 (unsafe_really_input_, really_input_) in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(2) (module_block, 0) in
    let field_1 = %block_load tag(0) size(2) (module_block, 1) in
    let $camlFoo = Block 0 (field_0, field_1) in
    cont done ($camlFoo)
