let $camlRec__first_const19 = Block 0 () in
let code rec loopify(default tailrec) size(6)
      g_1 (x) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let Popaque = %Opaque x in
  let Paddint = x + 1 in
  apply direct(g_1) my_closure (Paddint) &my_region -> k * k1
in
let code size(17) foo_0 (param) my_closure my_region my_depth -> k * k1 =
  let g = closure g_1 @g in
  apply direct(g_1) g (2) &my_region -> k * k1
in
(let foo = closure foo_0 @foo in
 let Pmakeblock = %Block 0 (foo) in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(1) (module_block, 0) in
    let $camlRec = Block 0 (field_0) in
    cont done ($camlRec)
===>
let code foo_0 deleted in
let code loopify(never) size(4) newer_version_of(foo_0)
      foo_0_1 (param) my_closure my_region my_depth -> k * k1 =
  cont self (2)
    where rec self (x) =
      let Popaque = %Opaque x in
      let Paddint = x + 1 in
      cont self (Paddint)
in
let $camlRec__foo_2 = closure foo_0_1 @foo in
let $camlRec = Block 0 ($camlRec__foo_2) in
cont done ($camlRec)
